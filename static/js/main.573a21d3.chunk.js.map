{"version":3,"sources":["assets/StatusBar.svg","components/NavBar.tsx","assets/HomeIndicator.svg","App.tsx","index.tsx"],"names":["NavBar","map","setDirectionsResponse","center","lat","lng","useState","distance","setDistance","duration","setDuration","destiantionRef","useRef","originRef","calculateRoute","a","current","value","directionsService","google","maps","DirectionsService","request","origin","destination","travelMode","TravelMode","DRIVING","route","results","routes","legs","text","className","src","top","alt","type","onClick","panTo","placeholder","ref","App","setMap","directionsResponse","googleMapsApiKey","libraries","loadingElement","zoom","mapContainerStyle","width","height","onLoad","position","directions","home","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.573a21d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/StatusBar.2fcec90b.svg\";","import React, { useRef, useState } from 'react';\nimport { Autocomplete } from '@react-google-maps/api';\nimport top from '../assets/StatusBar.svg';\nimport './NavBar.scss';\n\ninterface NavBarProps {\n  map: google.maps.Map | null;\n  setDirectionsResponse: any;\n}\n\nconst NavBar: React.FC<NavBarProps> = ({ map, setDirectionsResponse }) => {\n  const center = { lat: 48.8584, lng: 2.2945 };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [distance, setDistance] = useState<string>('');\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [duration, setDuration] = useState<string>('');\n\n  const destiantionRef = useRef<HTMLInputElement>(null);\n  const originRef = useRef<HTMLInputElement>(null);\n\n  const calculateRoute = async () => {\n    if (!originRef.current?.value || !destiantionRef.current?.value) {\n      return;\n    }\n\n    const directionsService = new google.maps.DirectionsService();\n    const request: google.maps.DirectionsRequest = {\n      origin: originRef.current.value,\n      destination: destiantionRef.current.value,\n      travelMode: google.maps.TravelMode.DRIVING,\n    };\n\n    try {\n      const results = await directionsService.route(request);\n\n      if (results) {\n        setDirectionsResponse(results);\n        setDistance(results.routes[0]?.legs[0]?.distance?.text || '');\n        setDuration(results.routes[0]?.legs[0]?.duration?.text || '');\n      }\n    } catch (error) {\n      // Handle the error\n    }\n  };\n\n  const clearRoute = () => {\n    setDirectionsResponse(null);\n    setDistance('');\n    setDuration('');\n    if (originRef.current) {\n      originRef.current.value = '';\n    }\n\n    if (destiantionRef.current) {\n      destiantionRef.current.value = '';\n    }\n  };\n\n  return (\n    <div className=\"navbar\">\n      <img src={top} alt=\"StatusBar\" />\n      <div className=\"container\">\n        <div className=\"controls\">\n          <button\n            type=\"button\"\n            className=\"button button--home\"\n            onClick={() => map?.panTo(center)}\n          >\n            Home\n          </button>\n          <button\n            type=\"button\"\n            className=\"button button--calculate\"\n            onClick={calculateRoute}\n          >\n            Calculate\n          </button>\n          <button\n            type=\"button\"\n            className=\"button button--clear\"\n            onClick={clearRoute}\n          >\n            Clear\n          </button>\n        </div>\n        <div className=\"input-group\">\n          <div className=\"autocomplete\">\n            <Autocomplete>\n              <input\n                className=\"input input--start\"\n                type=\"text\"\n                placeholder=\"Start\"\n                ref={originRef}\n              />\n            </Autocomplete>\n          </div>\n          <div className=\"autocomplete\">\n            <Autocomplete>\n              <input\n                className=\"input input--end\"\n                type=\"text\"\n                placeholder=\"End\"\n                ref={destiantionRef}\n              />\n            </Autocomplete>\n          </div>\n        </div>\n        <div className=\"results\">\n          <div className=\"small-input\">\n            <span className=\"input-label\">Distance:</span>\n            <input\n              className=\"input input--distance\"\n              type=\"text\"\n              value={distance}\n            />\n          </div>\n          <div className=\"small-input\">\n            <span className=\"input-label\">Duration:</span>\n            <input\n              className=\"input input--duration\"\n              type=\"text\"\n              value={duration}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","export default __webpack_public_path__ + \"static/media/HomeIndicator.d6336361.svg\";","import React, { useState } from 'react';\nimport {\n  GoogleMap, Marker, LoadScript, DirectionsRenderer,\n} from '@react-google-maps/api';\nimport NavBar from './components/NavBar';\nimport home from './assets/HomeIndicator.svg';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n\n  const [directionsResponse, setDirectionsResponse]\n  = useState<google.maps.DirectionsResult | null>(null);\n\n  const apiKey = 'AIzaSyAYd6GORf3u4BNL9OSI4QaYaRGQVLsOYfU';\n\n  const center = { lat: 48.8584, lng: 2.2945 };\n\n  return (\n    <LoadScript googleMapsApiKey={apiKey} libraries={['places']} loadingElement={<div>Loading...</div>}>\n      <div className=\"map-container\">\n        <NavBar\n          map={map}\n          setDirectionsResponse={setDirectionsResponse}\n        />\n\n        <GoogleMap\n          center={center}\n          zoom={15}\n          mapContainerStyle={{ width: '100%', height: '100%' }}\n          onLoad={maps => setMap(maps)}\n        >\n          <Marker position={center} />\n          {directionsResponse && <DirectionsRenderer directions={directionsResponse} />}\n        </GoogleMap>\n\n        <div className=\"img-container\">\n          <img src={home} alt=\"Home\" />\n        </div>\n        {' '}\n\n      </div>\n    </LoadScript>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}